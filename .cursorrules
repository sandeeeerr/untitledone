# UntitledOne – Full-Stack Music Collaboration Platform
Built with Next.js, Supabase & Shadcn/UI

**UntitledOne** is an open-source platform for remote collaboration between producers, DJs, and audio creatives. It combines file-sharing, time-based feedback, and lightweight project management — optimized for usability, modularity, and speed.

## Project Structure

```
src/
├─ app/                         # Next.js App Router (server-first)
│  └─ (routes)/…                # feature routes (e.g., dashboard, project, auth)
├─ components/                  # Atomic Design + shadcn/ui
│  ├─ atoms/
│  ├─ molecules/
│  ├─ organisms/
│  ├─ templates/                # includes email templates
│  └─ ui/                       # shadcn/ui building blocks
├─ hooks/                       # custom hooks
├─ i18n/                        # next-intl (messages/, routing)
├─ lib/
│  ├─ api/                      # queries, mutations, server actions
│  ├─ supabase/                 # server/client helpers
│  ├─ env.ts                    # zod-validated env
│  └─ utils.ts                  # cn(), helpers
├─ stories/                     # Storybook
├─ types/                       # Supabase schema types (generated)
└─ styles/                      # globals.css, tailwind.css (optional)
```

## Development Philosophy

- **Server-first**: data fetching & mutations via RSC/Server Actions; client components zo klein mogelijk.
- **Clear states**: elke route/segment heeft loading, empty en error states.
- **Atomic UI**: kleine, herbruikbare components; geen businesslogica in UI.
- **Single Source of Truth**: types, env en Supabase-setup centraal en getypeerd.
- **DRY & conventions**: herhaal geen logica; volg vaste patronen.
- **A11y & theming**: Radix toegankelijkheid, toetsenbordnavigatie, dark mode getest.

## Core Stack

- **Next.js 15 (App Router)**, **React**, **TypeScript**
- **Supabase** (Auth, DB, Storage)
- **Shadcn/UI** + **Radix UI** + **Tailwind**
- **TanStack Query** voor server state
- **react-hook-form** + **Zod** voor forms
- **next-intl** voor i18n
- DX: **ESLint**, **Prettier**, **Vitest**, **Cypress**, **Storybook**

## UI & i18n Guidelines

- Geen hardcoded UI-strings; gebruik `next-intl` (`useTranslations`) met gescope’de keys en pluralization.
- Shadcn + Radix als basis; Tailwind voor layout/spacing; geen `@apply`.
- Variants via `class-variance-authority`; `cn()` voor class merges.
- Atoms: puur visueel. Molecules: combineert atoms. Organisms: schermdelen, minimale orchestration. Templates: layout-only.

## Routing, Data & Performance

- Geen client-side fetch in RSC. Gebruik `fetch`/DB in server context of Server Actions.
- Stel `revalidate`, `dynamic` en caching bewust in.
- Minimaliseer `use client`; gebruik Suspense/dynamic import voor niet-kritische UI.
- Optimaliseer images en vermijd zware berekeningen in render (desnoods `useMemo`).

## Security & ENV

- Alleen variabelen met `NEXT_PUBLIC_*` mogen in client code.
- Secrets (Supabase, Resend) uitsluitend server-only (Server Actions, API routes of Edge Functions).
- Gebruik `.env.local` en `.env.production`. Lever `.env.example` met placeholders:

```
SUPABASE_URL=
SUPABASE_ANON_KEY=
SUPABASE_SERVICE_ROLE_KEY=
SUPABASE_DB_URL=
RESEND_API_KEY=
NEXT_PUBLIC_SITE_URL=
```

## Email (Resend)

- E-mail versturen gebeurt server-only met TSX templates in `src/components/templates/`.
- Geen keys in de client bundel. Voeg DKIM/afzenderdomein toe in deployment.

## Database, Migrations & RLS

- **Migrations** zijn idempotent en zoveel mogelijk in één transactie. Gebruik `if not exists`/`if exists`. Noteer onderaan hoe te “down”-reversen.

Voorbeeld:

```sql
begin;

create table if not exists public.projects (
  id bigint generated always as identity primary key,
  owner_id uuid not null,
  name text not null,
  created_at timestamptz not null default now()
);

alter table public.projects enable row level security;

create index if not exists projects_owner_id_idx
  on public.projects(owner_id);

commit;

/* Down (manual notes)
- drop index if exists public.projects_owner_id_idx;
- drop table if exists public.projects;
*/
```

* **RLS policies**: altijd per operatie (select/insert/update/delete) en expliciet `to authenticated/anon`. Gebruik `(select auth.uid())` in filters voor betere planning.

Canoniek voorbeeld:

```sql
create policy "projects are viewable by owners"
on public.projects
for select
to authenticated
using ( (select auth.uid()) = owner_id );

create policy "owners can insert projects"
on public.projects
for insert
to authenticated
with check ( (select auth.uid()) = owner_id );

create policy "owners can update projects"
on public.projects
for update
to authenticated
using ( (select auth.uid()) = owner_id )
with check ( (select auth.uid()) = owner_id );

create policy "owners can delete projects"
on public.projects
for delete
to authenticated
using ( (select auth.uid()) = owner_id );
```

## SQL Style (samenvatting)

* Keywords en ongequote identifiers in **lowercase**; gebruik `public.table` expliciet.
* Snake_case voor tabellen en kolommen; tabellen meervoud, kolommen enkelvoud.
* ISO timestamps (`timestamptz`) en duidelijke comments bij complexe stappen.
* Bij complexe queries: CTE’s, lineaire opbouw, leesbaarheid boven micro-optimisatie.

## Cursor Rules Mapping (globs)

Deze repo gebruikt Auto Attached rules per domein. Relevante mappen:

```
src/components/atoms/**
src/components/molecules/**
src/components/organisms/**
src/components/templates/**
src/components/ui/**
src/app/**
src/lib/supabase/**
src/app/api/**
src/i18n/**
```

Doel:

* Atomic UI patterns automatisch toepassen in `components/**`.
* Server-first en App Router patronen in `app/**`.
* Typed Supabase usage en RLS-conventies in `lib/supabase/**` en `app/api/**`.
* i18n afdwingen in de gehele `src/**`.

## Development Workflow

| Task                     | Command                |
| ------------------------ | ---------------------- |
| Dev server               | `npm run dev`          |
| Type check               | `npm run typecheck`    |
| Lint                     | `npm run lint`         |
| Format code              | `npm run format`       |
| Generate DB types        | `npm run gen:types`    |
| Unit tests               | `npm run test`         |
| E2E (Cypress)            | `npm run cypress:open` |
| Storybook                | `npm run storybook`    |
| Full check (type + lint) | `pnpm check`           |

## Package & Tooling Notes

* `format` script: `prettier --write .`
* Handige extra scripts:

  * `lint:fix`: `next lint --fix`
  * `check`: `pnpm typecheck && pnpm lint`
* Prettier is leidend (incl. `prettier-plugin-tailwindcss`).
* ESLint: react-hooks, import/order, @tanstack rules, no unused vars.
* TypeScript strict: `noImplicitAny`, `strictNullChecks`, `exactOptionalPropertyTypes`.
* Tailwind PostCSS plugin opnemen in `postcss.config.js` indien nodig (`@tailwindcss/postcss`).

## Customization & Extension

* Breid routes uit onder `src/app/`.
* Voeg UI toe in `src/components/` (Atomic + shadcn).
* Pas DB-schema aan via migrations; **genereer types opnieuw** (`npm run gen:types`).
* Breid i18n uit in `src/i18n/messages/`.
* Werk `.env` bij per omgeving.

# UntitledOne – Full-Stack Music Collaboration Platform
Built with Next.js, Supabase & Shadcn/UI

**UntitledOne** is an open-source platform for remote collaboration between producers, DJs, and audio creatives. It combines file-sharing, time-based feedback, and lightweight project management — optimized for usability, modularity, and speed.

## Project Structure
src/
├─ app/ # Next.js App Router (server-first)
│ └─ (routes)/… # feature routes (e.g., dashboard, project, auth)
├─ components/ # Atomic Design + shadcn/ui
│ ├─ atoms/
│ ├─ molecules/
│ ├─ organisms/
│ ├─ templates/ # includes email templates
│ └─ ui/ # shadcn/ui building blocks
├─ hooks/ # custom hooks
├─ i18n/ # next-intl (messages/, routing)
├─ lib/
│ ├─ api/ # queries, mutations, server actions
│ ├─ supabase/ # server/client helpers
│ ├─ env.ts # zod-validated env
│ └─ utils.ts # cn(), helpers
├─ stories/ # Storybook
├─ types/ # Supabase schema types (generated)
└─ styles/ # globals.css, tailwind.css (optional)

## Development Philosophy

- **Server-first**: data fetching & mutations via RSC/Server Actions; client components zo klein mogelijk.
- **Clear states**: elke route/segment heeft loading, empty en error states.
- **Atomic UI**: kleine, herbruikbare components; geen businesslogica in UI.
- **Single Source of Truth**: types, env en Supabase-setup centraal en getypeerd.
- **DRY & conventions**: herhaal geen logica; volg vaste patronen.
- **A11y & theming**: Radix toegankelijkheid, toetsenbordnavigatie, dark mode getest.

## Core Stack

- **Next.js 15 (App Router)**, **React**, **TypeScript**
- **Supabase** (Auth, DB, Storage)
- **Shadcn/UI** + **Radix UI** + **Tailwind**
- **TanStack Query** voor server state
- **react-hook-form** + **Zod** voor forms
- **next-intl** voor i18n
- DX: **ESLint**, **Prettier**, **Vitest**, **Cypress**, **Storybook**

## UI & i18n Guidelines

- Geen hardcoded UI-strings; gebruik `next-intl` (`useTranslations`) met gescope’de keys en pluralization.
- Shadcn + Radix als basis; Tailwind voor layout/spacing; geen `@apply`.
- Variants via `class-variance-authority`; `cn()` voor class merges.
- Atoms: puur visueel. Molecules: combineert atoms. Organisms: schermdelen, minimale orchestration. Templates: layout-only.

## Routing, Data & Performance

- Geen client-side fetch in RSC. Gebruik `fetch`/DB in server context of Server Actions.
- Stel `revalidate`, `dynamic` en caching bewust in.
- Minimaliseer `use client`; gebruik Suspense/dynamic import voor niet-kritische UI.
- Optimaliseer images en vermijd zware berekeningen in render (desnoods `useMemo`).

## Security & ENV

- Alleen variabelen met `NEXT_PUBLIC_*` mogen in client code.
- Secrets (Supabase, Resend) uitsluitend server-only (Server Actions, API routes of Edge Functions).
- Gebruik `.env.local` en `.env.production`. Lever `.env.example` met placeholders:

SUPABASE_URL=
SUPABASE_ANON_KEY=
SUPABASE_SERVICE_ROLE_KEY=
SUPABASE_DB_URL=
RESEND_API_KEY=
NEXT_PUBLIC_SITE_URL=

sql
Copy
Edit

## Email (Resend)

- E-mail versturen gebeurt server-only met TSX templates in `src/components/templates/`.
- Geen keys in de client bundel. Voeg DKIM/afzenderdomein toe in deployment.

## Database, Migrations & RLS

- **Migrations** zijn idempotent en zoveel mogelijk in één transactie. Gebruik `if not exists`/`if exists`. Noteer onderaan hoe te “down”-reversen.

Voorbeeld:

```sql
begin;

create table if not exists public.projects (
  id bigint generated always as identity primary key,
  owner_id uuid not null,
  name text not null,
  created_at timestamptz not null default now()
);

alter table public.projects enable row level security;

create index if not exists projects_owner_id_idx
  on public.projects(owner_id);

commit;

/* Down (manual notes)
- drop index if exists public.projects_owner_id_idx;
- drop table if exists public.projects;
*/
RLS policies: altijd per operatie (select/insert/update/delete) en expliciet to authenticated/anon. Gebruik (select auth.uid()) in filters voor betere planning.

Canoniek voorbeeld:

```sql
create policy "projects are viewable by owners"
on public.projects
for select
to authenticated
using ( (select auth.uid()) = owner_id );

create policy "owners can insert projects"
on public.projects
for insert
to authenticated
with check ( (select auth.uid()) = owner_id );

create policy "owners can update projects"
on public.projects
for update
to authenticated
using ( (select auth.uid()) = owner_id )
with check ( (select auth.uid()) = owner_id );

create policy "owners can delete projects"
on public.projects
for delete
to authenticated
using ( (select auth.uid()) = owner_id );
```
SQL Style (samenvatting)
Keywords en ongequote identifiers in lowercase; gebruik public.table expliciet.

Snake_case voor tabellen en kolommen; tabellen meervoud, kolommen enkelvoud.

ISO timestamps (timestamptz) en duidelijke comments bij complexe stappen.

Bij complexe queries: CTE’s, lineaire opbouw, leesbaarheid boven micro-optimisatie.

Cursor Rules Mapping (globs)
Deze repo gebruikt Auto Attached rules per domein. Relevante mappen:

```
src/components/atoms/**
src/components/molecules/**
src/components/organisms/**
src/components/templates/**
src/components/ui/**
src/app/**
src/lib/supabase/**
src/app/api/**
src/i18n/**
```

Doel:

Atomic UI patterns automatisch toepassen in components/**.

Server-first en App Router patronen in app/**.

Typed Supabase usage en RLS-conventies in lib/supabase/** en app/api/**.

i18n afdwingen in de gehele src/**.

Development Workflow
Task	Command
Dev server	npm run dev
Type check	npm run typecheck
Lint	npm run lint
Format code	npm run format
Generate DB types	npm run gen:types
Unit tests	npm run test
E2E (Cypress)	npm run cypress:open
Storybook	npm run storybook
Full check (type + lint)	pnpm check

Package & Tooling Notes
format script: prettier --write .

Handige extra scripts:

lint:fix: next lint --fix

check: pnpm typecheck && pnpm lint

Prettier is leidend (incl. prettier-plugin-tailwindcss).

ESLint: react-hooks, import/order, @tanstack rules, no unused vars.

TypeScript strict: noImplicitAny, strictNullChecks, exactOptionalPropertyTypes.

Tailwind PostCSS plugin opnemen in postcss.config.js indien nodig (@tailwindcss/postcss).

Customization & Extension
Breid routes uit onder src/app/.

Voeg UI toe in src/components/ (Atomic + shadcn).

Pas DB-schema aan via migrations; genereer types opnieuw (npm run gen:types).

Breid i18n uit in src/i18n/messages/.

Werk .env bij per omgeving.




tasks:
  - name: "mcp-test-untitledone"
    description: "Automatisch testen van MVP user stories met Chrome MCP"
    tools:
      - chrome
    steps:
      - comment: "1️⃣ Authenticatieflow"
      - run: |
          chrome.open("http://localhost:3000/auth/login")
          chrome.waitForSelector("form")
          chrome.type("input[name='email']", "${TEST_EMAIL}")
          chrome.type("input[name='password']", "${TEST_PASSWORD}")
          chrome.click("button[type='submit']")
          chrome.waitForSelector(".dashboard")
          chrome.capturePerformance("auth-trace.json")

      - comment: "2️⃣ Project aanmaken"
      - run: |
          chrome.open("http://localhost:3000/dashboard")
          chrome.click("[data-test='new-project-button']")
          chrome.type("input[name='title']", "MCP Test Project")
          chrome.type("textarea[name='description']", "Automated test via MCP")
          chrome.click("button[type='submit']")
          chrome.captureNetwork("create-project.json")

      - comment: "3️⃣ Bestand uploaden"
      - run: |
          chrome.open("http://localhost:3000/project/1/files")
          chrome.upload("input[type='file']", "./test-audio.wav")
          chrome.waitForSelector(".file-item")
          chrome.capturePerformance("upload-trace.json")

      - comment: "4️⃣ Feedback plaatsen"
      - run: |
          chrome.open("http://localhost:3000/project/1/files")
          chrome.click(".comment-button")
          chrome.type(".comment-input", "Automated feedback test")
          chrome.click(".comment-submit")
          chrome.waitForSelector(".comment-thread")
          chrome.captureNetwork("feedback.json")

      - comment: "5️⃣ DOM & CSS check"
      - run: |
          chrome.inspectDOM("dashboard-dom.json")
          chrome.inspectCSS(".sidebar, .navbar, .card", "style-check.json")