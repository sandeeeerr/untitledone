
# UntitledOne – Full-Stack Music Collaboration Platform  
Built with Next.js, Supabase & Shadcn/UI  

**UntitledOne** is an open-source platform designed for remote collaboration between producers, DJs, and audio creatives. Built using a modern tech stack, it combines file-sharing, feedback, and project management features into one focused environment — prioritizing usability, modularity, and speed.

## ⚙️ Project Structure  

The project follows a modular and scalable file structure:

```
src/
├── app/                    # App Router structure (Next.js 15)
│   ├── auth/               # Authentication flows
│   ├── dashboard/          # Project overview for logged-in users
│   ├── project/            # Project pages, feedback & file views
│   └── landing/            # Public landing page
├── components/             # Reusable UI components (Shadcn)
│   └── ui/                 # Atomic UI building blocks
├── fonts/                  # Typography assets
├── hooks/                  # Custom hooks
├── i18n/                   # Translation files
├── lib/                    # Configs & utility functions
│   ├── api/                # API queries & helpers
│   ├── supabase/           # Supabase client logic
│   └── env.ts              # Environment configuration
├── stories/                # Storybook components
├── types/                  # Supabase schema types (auto-generated)
└── middleware.ts           # Next.js middleware (auth handling)
```

## 🧠 Development Philosophy  

To ensure long-term maintainability, UntitledOne follows these key principles:

- **Atomic UI**: Components are structured using the [Atomic Design](https://bradfrost.com/blog/post/atomic-web-design/) methodology to ensure reusability and clarity.
- **Single Source of Truth**: All config and schema logic is centralized (e.g., types, env, Supabase setup).
- **No Repetition (DRY)**: Common logic is abstracted into hooks or utility functions.
- **Convention Over Configuration**: Navigation patterns and UI decisions follow best practices to reduce cognitive overhead.
- **Accessibility & Theming**: Light/dark mode, keyboard navigation and semantic markup are implemented where possible.

## 🧰 Core Tech Stack  

### Framework & Backend  
- **Next.js 15 (App Router)** – Flexible routing, SSR and edge-ready  
- **Supabase** – Auth, database, and storage as a Firebase alternative  
- **TypeScript** – Type safety across the stack  
- **React 18** – Component-based UI  

### UI & Styling  
- **Shadcn/UI** – Accessible UI components powered by Radix UI  
- **Tailwind CSS** – Utility-first styling  
- **Lucide React** – Icon library  
- **next-themes** – Theme toggling (light/dark)  

### Forms & Validation  
- **React Hook Form** – Declarative forms  
- **Zod** – Schema validation  
- **@hookform/resolvers** – Zod ↔ RHF integration  

### Data Fetching  
- **TanStack Query (React Query)** – Server state management  

### i18n  
- **next-intl** – Translation system with `en.json`, `fr.json`, etc.  

### Dev Experience  
- **Storybook** – Component development environment  
- **Vitest** – Unit testing  
- **Cypress** – E2E testing  
- **ESLint & Prettier** – Linting and code style  
- **Postgres** – Managed by Supabase  

## 🧪 Development Workflow  

| Task                      | Command                       |
|---------------------------|-------------------------------|
| Start dev server          | `npm run dev`                 |
| Type check                | `npm run typecheck`           |
| Format code               | `npm run format`              |
| Lint                      | `npm run lint`                |
| Generate DB types         | `npm run gen:types`           |
| Run unit tests            | `npm run test`                |
| Open Cypress (E2E tests)  | `npm run cypress:open`        |
| Start Storybook           | `npm run storybook`           |

## 🛠️ Customization & Extension  

The project is built to scale. Some key areas for extension:

- Extend routes (`/app`) to add new features  
- Add UI components to `/components/`  
- Expand Supabase schema and regenerate types  
- Add new languages in `src/i18n/messages/`  
- Update the `.env` file for environment-specific config  
